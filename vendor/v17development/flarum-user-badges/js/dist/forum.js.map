{"version":3,"sources":["webpack://@v17development/flarum-badges/webpack/bootstrap","webpack://@v17development/flarum-badges/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@v17development/flarum-badges/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@v17development/flarum-badges/external \"flarum.core.compat['Model']\"","webpack://@v17development/flarum-badges/external \"flarum.core.compat['components/Button']\"","webpack://@v17development/flarum-badges/external \"flarum.core.compat['utils/Stream']\"","webpack://@v17development/flarum-badges/external \"flarum.core.compat['components/Modal']\"","webpack://@v17development/flarum-badges/external \"flarum.core.compat['common/Component']\"","webpack://@v17development/flarum-badges/external \"flarum.core.compat['utils/ItemList']\"","webpack://@v17development/flarum-badges/external \"flarum.core.compat['components/LoadingIndicator']\"","webpack://@v17development/flarum-badges/external \"flarum.core.compat['components/LinkButton']\"","webpack://@v17development/flarum-badges/external \"flarum.core.compat['utils/mixin']\"","webpack://@v17development/flarum-badges/./src/forum/components/BadgeModal.js","webpack://@v17development/flarum-badges/./src/forum/components/GiveBadgeModal.js","webpack://@v17development/flarum-badges/external \"flarum.core.compat['components/IndexPage']\"","webpack://@v17development/flarum-badges/external \"flarum.core.compat['components/Link']\"","webpack://@v17development/flarum-badges/external \"flarum.core.compat['extend']\"","webpack://@v17development/flarum-badges/./src/common/models/Badge.js","webpack://@v17development/flarum-badges/external \"flarum.core.compat['helpers/fullTime']\"","webpack://@v17development/flarum-badges/./src/common/models/BadgeCategory.js","webpack://@v17development/flarum-badges/external \"flarum.core.compat['components/UserPage']\"","webpack://@v17development/flarum-badges/external \"flarum.core.compat['components/Page']\"","webpack://@v17development/flarum-badges/external \"flarum.core.compat['common/helpers/listItems']\"","webpack://@v17development/flarum-badges/external \"flarum.core.compat['components/Select']\"","webpack://@v17development/flarum-badges/external \"flarum.core.compat['models/User']\"","webpack://@v17development/flarum-badges/external \"flarum.core.compat['utils/UserControls']\"","webpack://@v17development/flarum-badges/external \"flarum.core.compat['common/components/Tooltip']\"","webpack://@v17development/flarum-badges/external \"flarum.core.compat['helpers/avatar']\"","webpack://@v17development/flarum-badges/external \"flarum.core.compat['helpers/humanTime']\"","webpack://@v17development/flarum-badges/external \"flarum.core.compat['common/states/PaginatedListState']\"","webpack://@v17development/flarum-badges/external \"flarum.core.compat['forum/components/Notification']\"","webpack://@v17development/flarum-badges/external \"flarum.core.compat['forum/components/NotificationGrid']\"","webpack://@v17development/flarum-badges/./src/common/models/UserBadge.js","webpack://@v17development/flarum-badges/./src/forum/components/UserBadge.js","webpack://@v17development/flarum-badges/./src/forum/components/UserBadgeList.js","webpack://@v17development/flarum-badges/./src/forum/components/BadgesProfilePage.js","webpack://@v17development/flarum-badges/./src/forum/components/BadgeCategoryList/TableView.js","webpack://@v17development/flarum-badges/./src/forum/components/BadgeCategoryList/BlockListView.js","webpack://@v17development/flarum-badges/./src/forum/components/BadgesOverviewPage.js","webpack://@v17development/flarum-badges/./src/forum/components/BadgeUserList.js","webpack://@v17development/flarum-badges/./src/forum/components/BadgeItemPage.js","webpack://@v17development/flarum-badges/./src/forum/addSidebarNav.js","webpack://@v17development/flarum-badges/./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack://@v17development/flarum-badges/./src/forum/states/UserBadgeListState.js","webpack://@v17development/flarum-badges/./src/forum/notification/BadgeReceivedNotification.js","webpack://@v17development/flarum-badges/./src/forum/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_setPrototypeOf","setPrototypeOf","__proto__","_inheritsLoose","subClass","superClass","constructor","flarum","core","compat","BadgeModal","oninit","vnode","this","loading","className","title","app","translator","trans","content","data","toArray","href","route","id","attrs","badge","style","margin","userBadgeData","forum","attribute","onclick","confirm","then","hide","items","ItemList","add","description","e","preventDefault","modal","show","GiveBadgeModal","fullTime","assignedAt","category","earnedAmount","count","Modal","selectedBadge","user","userHasBadge","store","createRecord","Stream","categories","uncategorizedBadges","find","include","badges","forEach","push","redraw","exists","fields","type","disabled","onchange","target","getById","checkUserHasBadge","values","map","label","length","class","placeholder","bidi","foundBadge","userBadges","userBadge","onsubmit","save","relationships","response","handleErrors","Badge","apiEndpoint","mixin","Model","icon","order","image","isVisible","createdAt","hasOne","BadgeCategory","isEnabled","isTable","users","hasMany","UserBadge","isPrimary","view","text","Component","UserBadgeList","uncategorized","keys","sort","a","b","BadgesProfilePage","loadUser","param","size","component","UserPage","TableView","width","scope","BlockListView","BadgesOverviewPage","bodyClass","history","setTitle","all","listItems","IndexPage","sidebarItems","Page","BadgeUserList","state","refreshParams","filter","badgeId","isInitialLoading","isLoadingNext","LoadingIndicator","hasNext","Button","loadNext","isEmpty","getPages","pg","username","avatar","displayName","date","humanTime","BadgeItemPage","found","userBadgeListState","addSidebarNav","extend","_defineProperties","props","descriptor","configurable","writable","UserBadgeListState","pageSize","Constructor","protoProps","staticProps","PaginatedListState","BadgeReceivedNotification","session","excerpt","subject","notification","Notification","initializers","models","badgeCategories","User","userPrimaryBadge","routes","path","notificationComponents","badgeReceived","NotificationGrid","LinkButton","UserControls"],"mappings":"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","file":"forum.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 36);\n","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","module.exports = flarum.core.compat['Model'];","module.exports = flarum.core.compat['components/Button'];","module.exports = flarum.core.compat['utils/Stream'];","module.exports = flarum.core.compat['components/Modal'];","module.exports = flarum.core.compat['common/Component'];","module.exports = flarum.core.compat['utils/ItemList'];","module.exports = flarum.core.compat['components/LoadingIndicator'];","module.exports = flarum.core.compat['components/LinkButton'];","module.exports = flarum.core.compat['utils/mixin'];","import Modal from \"flarum/components/Modal\";\nimport Button from \"flarum/components/Button\";\nimport fullTime from \"flarum/helpers/fullTime\";\nimport ItemList from \"flarum/utils/ItemList\";\nimport LinkButton from \"flarum/components/LinkButton\";\nimport GiveBadgeModal from \"./GiveBadgeModal\";\n\nexport default class BadgeModal extends Modal {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.loading = false;\n  }\n\n  className() {\n    return \"Modal--small\";\n  }\n\n  title() {\n    return app.translator.trans(\n      \"v17development-flarum-badges.forum.badge_information\"\n    );\n  }\n\n  content() {\n    return (\n      <div>\n        <div className=\"Modal-body\">{this.data().toArray()}</div>\n        <div className=\"Modal-footer\">\n          <LinkButton\n            href={app.route(\"badges.item\", {\n              id: this.attrs.badge.id(),\n            })}\n            className={\"Button\"}\n            style={{\n              margin: \"0 10px\",\n            }}\n          >\n            {app.translator.trans(\n              \"v17development-flarum-badges.forum.badge.badge_details\"\n            )}\n          </LinkButton>\n\n          {this.attrs.userBadgeData && app.forum.attribute(\"canGiveBadge\") && (\n            <Button\n              className={\"Button Button--primary\"}\n              onclick={() => {\n                if (\n                  confirm(\n                    app.translator.trans(\n                      \"v17development-flarum-badges.forum.moderation.remove_badge_confirm\"\n                    )\n                  )\n                ) {\n                  this.loading = true;\n                  this.attrs.userBadgeData.delete().then(() => this.hide());\n                }\n              }}\n              loading={this.loading}\n            >\n              {app.translator.trans(\n                \"v17development-flarum-badges.forum.moderation.remove_badge\"\n              )}\n            </Button>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  data() {\n    const items = new ItemList();\n\n    // Badge name\n    items.add(\n      \"name\",\n      <div className={\"BadgeModalListItem\"}>\n        <p>\n          <b>\n            {app.translator.trans(\n              \"v17development-flarum-badges.forum.badge.name\"\n            )}\n            :\n          </b>\n        </p>\n        <p>{this.attrs.badge.name()}</p>\n      </div>\n    );\n\n    // Badge description\n    items.add(\n      \"description\",\n      <div className={\"BadgeModalListItem\"}>\n        <p>\n          <b>\n            {app.translator.trans(\n              \"v17development-flarum-badges.forum.badge.description\"\n            )}\n            :\n          </b>\n        </p>\n        <p>{this.attrs.badge.description()}</p>\n      </div>\n    );\n\n    // Badge earning reason\n    if (\n      this.attrs.userBadgeData &&\n      (this.attrs.userBadgeData.description() ||\n        app.forum.attribute(\"canGiveBadge\"))\n    ) {\n      items.add(\n        \"earning_reason\",\n        <div className={\"BadgeModalListItem\"}>\n          <p>\n            <b>\n              {app.translator.trans(\n                \"v17development-flarum-badges.forum.badge.earning_reason\"\n              )}\n              :\n            </b>\n          </p>\n\n          <p>\n            {this.attrs.userBadgeData.description() ? (\n              this.attrs.userBadgeData.description()\n            ) : (\n              <i>\n                {app.translator.trans(\n                  \"v17development-flarum-badges.forum.badge.no_earning_reason\"\n                )}\n              </i>\n            )}\n          </p>\n          <p>\n            {app.forum.attribute(\"canGiveBadge\") && (\n              <a\n                href={\"#\"}\n                onclick={(e) => {\n                  e.preventDefault();\n                  app.modal.show(GiveBadgeModal, {\n                    badge: this.attrs.userBadgeData,\n                  });\n                }}\n              >\n                {app.translator.trans(\n                  \"v17development-flarum-badges.forum.badge.update_earning_reason\"\n                )}\n              </a>\n            )}\n          </p>\n        </div>\n      );\n    }\n\n    // Badge earned on\n    if (this.attrs.userBadgeData) {\n      items.add(\n        \"earned_date\",\n        <div className={\"BadgeModalListItem\"}>\n          <p>\n            <b>\n              {app.translator.trans(\n                \"v17development-flarum-badges.forum.badge.earned_on\"\n              )}\n              :\n            </b>\n          </p>\n          <p>{fullTime(this.attrs.userBadgeData.assignedAt())}</p>\n        </div>\n      );\n    }\n\n    // Badge category\n    if (this.attrs.userBadgeData) {\n      items.add(\n        \"category\",\n        <div className={\"BadgeModalListItem\"}>\n          <p>\n            <b>\n              {app.translator.trans(\n                \"v17development-flarum-badges.forum.badge.category\"\n              )}\n              :\n            </b>\n          </p>\n          <p>\n            {this.attrs.badge.category() && this.attrs.badge.category().name()}\n\n            {/* Uncategorized */}\n            {!this.attrs.badge.category() &&\n              app.translator.trans(\n                \"v17development-flarum-badges.forum.uncategorized\"\n              )}\n            {/* <Link\n              href={app.route(\"badges.category\", {\n                category: this.attrs.badge.category().id(),\n              })}\n            >\n              {app.translator.trans(\n                \"v17development-flarum-badges.forum.all_badges\"\n              )}\n            </Link> */}\n          </p>\n        </div>\n      );\n    }\n\n    // Badge category\n    if (this.attrs.badge && this.attrs.badge.earnedAmount()) {\n      items.add(\n        \"earned_amount\",\n        <div className={\"BadgeModalListItem\"}>\n          <p>\n            {app.translator.trans(\n              \"v17development-flarum-badges.forum.badge.earned_count\",\n              {\n                count: this.attrs.badge.earnedAmount(),\n              }\n            )}\n          </p>\n        </div>\n      );\n    }\n\n    return items;\n  }\n}\n","import Modal from \"flarum/components/Modal\";\nimport Button from \"flarum/components/Button\";\nimport ItemList from \"flarum/utils/ItemList\";\nimport Select from \"flarum/components/Select\";\nimport Stream from \"flarum/utils/Stream\";\nimport BadgeModal from \"./BadgeModal\";\n\nexport default class GiveBadgeModal extends Modal {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    // Select image\n    this.selectedBadge = this.attrs.badge ? this.attrs.badge.badge() : null;\n\n    // Current user\n    this.user = this.attrs.badge ? this.attrs.badge.user() : this.attrs.user;\n\n    // User has badge\n    this.userHasBadge = false;\n\n    // Badge model\n    this.badge = this.attrs.badge\n      ? this.attrs.badge\n      : app.store.createRecord(\"userBadges\");\n\n    // Earning reason\n    this.description = Stream(this.badge.description());\n\n    // List of available bagges\n    this.categories = {};\n\n    this.uncategorizedBadges = [];\n\n    this.loading = false;\n\n    // Load all available badges\n    if (!this.attrs.badge) {\n      this.loading = true;\n\n      app.store\n        .find(\"badges\", {\n          include: \"category\",\n        })\n        .then((badges) => {\n          badges.forEach((badge) => {\n            // Categorized\n            if (badge.category()) {\n              const category = badge.category();\n\n              if (!this.categories[category.id()]) {\n                this.categories[category.id()] = {\n                  category,\n                  badges: [badge],\n                };\n              } else {\n                this.categories[category.id()].badges.push(badge);\n              }\n            }\n            // Uncategorized\n            else {\n              this.uncategorizedBadges.push(badge);\n            }\n          });\n\n          this.loading = false;\n\n          // Redraw\n          m.redraw();\n        });\n    }\n  }\n\n  className() {\n    return \"Modal--small BadgeModal\";\n  }\n\n  title() {\n    return app.translator.trans(\n      `v17development-flarum-badges.forum.${\n        this.badge.exists ? \"update\" : \"give\"\n      }_badge`\n    );\n  }\n\n  content() {\n    return (\n      <div>\n        <div className=\"Modal-body\">\n          <div className=\"Form\">{this.fields().toArray()}</div>\n        </div>\n\n        <div className=\"Modal-footer\">\n          <Button\n            className={\"Button Button--primary\"}\n            type={\"submit\"}\n            loading={this.loading}\n            disabled={this.userHasBadge}\n          >\n            {app.translator.trans(\"core.forum.composer_edit.submit_button\")}\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  fields() {\n    const items = new ItemList();\n\n    // Badge selector\n    items.add(\n      \"badge\",\n      <div className=\"BadgeModalListItem\">\n        <p>\n          <b>\n            {app.translator.trans(\n              \"v17development-flarum-badges.forum.badge.badge\"\n            )}\n          </b>\n        </p>\n\n        <div className={\"Select\"}>\n          <select\n            value={this.selectedBadge ? this.selectedBadge.id() : \"empty\"}\n            disabled={!!this.attrs.badge}\n            onchange={(e) => {\n              if (e.target.value === \"empty\") return;\n              this.selectedBadge = app.store.getById(\"badges\", e.target.value);\n\n              // Check if the user already has this badge\n              this.checkUserHasBadge(this.selectedBadge);\n            }}\n            className=\"Select-input FormControl\"\n          >\n            <option value={\"empty\"}>\n              {app.translator.trans(\n                \"v17development-flarum-badges.forum.select_badge\"\n              )}\n            </option>\n\n            {/* When no badge is selected, show all available badges */}\n            {!this.attrs.badge &&\n              Object.values(this.categories).map(({ category, badges }) => (\n                <optgroup label={category.name()}>\n                  {badges.map((badge) => (\n                    <option value={badge.id()}>{badge.name()}</option>\n                  ))}\n                </optgroup>\n              ))}\n\n            {!this.attrs.badge && this.uncategorizedBadges.length >= 1 && (\n              <optgroup\n                label={app.translator.trans(\n                  \"v17development-flarum-badges.forum.uncategorized\"\n                )}\n              >\n                {this.uncategorizedBadges.map((badge) => (\n                  <option value={badge.id()}>{badge.name()}</option>\n                ))}\n              </optgroup>\n            )}\n\n            {/* When a badge is already assigned */}\n            {!!this.attrs.badge && (\n              <option value={this.selectedBadge.id()}>\n                {this.selectedBadge.name()}\n              </option>\n            )}\n          </select>\n          <i class=\"icon fas fa-caret-down Select-caret\"></i>\n        </div>\n\n        {this.userHasBadge && (\n          <p className={\"UserHasBadge\"}>\n            {app.translator.trans(\n              \"v17development-flarum-badges.forum.user_has_badge\"\n            )}\n          </p>\n        )}\n      </div>,\n      30\n    );\n\n    // Badge description\n    items.add(\n      \"badge_description\",\n      <div className={\"BadgeModalListItem\"}>\n        <p>\n          <b>\n            {app.translator.trans(\n              \"v17development-flarum-badges.forum.badge.description\"\n            )}\n            :\n          </b>\n        </p>\n        <p>\n          {this.selectedBadge\n            ? this.selectedBadge.description()\n            : app.translator.trans(\n                \"v17development-flarum-badges.forum.select_badge\"\n              )}\n        </p>\n      </div>,\n      30\n    );\n\n    // Badge earning reason\n    items.add(\n      \"description\",\n      <div className=\"BadgeModalListItem\">\n        <p>\n          <b>\n            {app.translator.trans(\n              \"v17development-flarum-badges.forum.badge.earning_reason\"\n            )}\n          </b>\n        </p>\n        <textarea\n          className=\"FormControl\"\n          placeholder={app.translator.trans(\n            \"v17development-flarum-badges.forum.badge.earning_reason\"\n          )}\n          bidi={this.description}\n        />\n      </div>,\n      30\n    );\n\n    return items;\n  }\n\n  checkUserHasBadge(badge) {\n    let foundBadge = false;\n\n    this.user.userBadges().map((userBadge) => {\n      if (userBadge.badge() == badge) {\n        foundBadge = true;\n      }\n    });\n\n    this.userHasBadge = foundBadge;\n\n    m.redraw();\n  }\n\n  onsubmit(e) {\n    e.preventDefault();\n\n    this.loading = true;\n\n    this.badge\n      .save({\n        description: this.description(),\n        relationships: this.attrs.badge\n          ? {}\n          : {\n              badge: this.selectedBadge,\n              user: this.user,\n            },\n      })\n      .then(\n        () => {\n          // Re-open badge modal\n          if (this.attrs.badge) {\n            app.modal.show(BadgeModal, {\n              badge: this.attrs.badge.badge(),\n              userBadgeData: this.attrs.badge,\n            });\n          } else {\n            this.hide();\n          }\n\n          m.redraw();\n        },\n        (response) => {\n          this.loading = false;\n          this.handleErrors(response);\n        }\n      );\n  }\n}\n","module.exports = flarum.core.compat['components/IndexPage'];","module.exports = flarum.core.compat['components/Link'];","module.exports = flarum.core.compat['extend'];","import Model from \"flarum/Model\";\nimport mixin from \"flarum/utils/mixin\";\nimport BadgeModal from \"../../forum/components/BadgeModal\";\n\nexport default class Badge extends mixin(Model, {\n  name: Model.attribute(\"name\"),\n  icon: Model.attribute(\"icon\"),\n  order: Model.attribute(\"order\"),\n  image: Model.attribute(\"image\"),\n  description: Model.attribute(\"description\"),\n  isVisible: Model.attribute(\"isVisible\"),\n  createdAt: Model.attribute(\"createdAt\"),\n  earnedAmount: Model.attribute(\"earnedAmount\"),\n  category: Model.hasOne(\"category\"),\n}) {\n  apiEndpoint() {\n    return \"/badges\" + (this.exists ? \"/\" + this.data.id : \"\");\n  }\n}\n","module.exports = flarum.core.compat['helpers/fullTime'];","import Model from \"flarum/Model\";\nimport mixin from \"flarum/utils/mixin\";\n\nexport default class BadgeCategory extends mixin(Model, {\n  name: Model.attribute(\"name\"),\n  order: Model.attribute(\"order\"),\n  description: Model.attribute(\"description\"),\n  isEnabled: Model.attribute(\"isEnabled\"),\n  createdAt: Model.attribute(\"createdAt\"),\n  isTable: Model.attribute(\"isTable\"),\n  users: Model.hasMany(\"users\"),\n  badges: Model.hasMany(\"badges\"),\n}) {\n  apiEndpoint() {\n    return \"/badge_categories\" + (this.exists ? \"/\" + this.data.id : \"\");\n  }\n}\n","module.exports = flarum.core.compat['components/UserPage'];","module.exports = flarum.core.compat['components/Page'];","module.exports = flarum.core.compat['common/helpers/listItems'];","module.exports = flarum.core.compat['components/Select'];","module.exports = flarum.core.compat['models/User'];","module.exports = flarum.core.compat['utils/UserControls'];","module.exports = flarum.core.compat['common/components/Tooltip'];","module.exports = flarum.core.compat['helpers/avatar'];","module.exports = flarum.core.compat['helpers/humanTime'];","module.exports = flarum.core.compat['common/states/PaginatedListState'];","module.exports = flarum.core.compat['forum/components/Notification'];","module.exports = flarum.core.compat['forum/components/NotificationGrid'];","import Model from \"flarum/Model\";\nimport mixin from \"flarum/utils/mixin\";\n\nexport default class UserBadge extends mixin(Model, {\n  user: Model.hasOne(\"user\"),\n  badge: Model.hasOne(\"badge\"),\n  description: Model.attribute(\"description\"),\n  isPrimary: Model.attribute(\"isPrimary\"),\n  assignedAt: Model.attribute(\"assignedAt\"),\n}) {\n  apiEndpoint() {\n    return \"/user_badges\" + (this.exists ? \"/\" + this.data.id : \"\");\n  }\n}\n","import Component from \"flarum/common/Component\";\nimport Tooltip from \"flarum/common/components/Tooltip\";\nimport BadgeModal from \"./BadgeModal\";\n\nexport default class UserBadge extends Component {\n  view() {\n    // Hide badge when not enabled\n    if (!this.attrs.badge.isVisible()) {\n      return null;\n    }\n\n    return (\n      <Tooltip\n        text={`${\n          this.attrs.badge.description() ? this.attrs.badge.description() : \"\"\n        }`}\n      >\n        <span\n          className=\"UserBadge\"\n          onclick={() =>\n            app.modal.show(BadgeModal, {\n              badge: this.attrs.badge,\n              userBadgeData: this.attrs.userBadgeData,\n            })\n          }\n        >\n          <i className={this.attrs.badge.icon()} /> {this.attrs.badge.name()}\n        </span>\n      </Tooltip>\n    );\n  }\n}\n","import Component from \"flarum/common/Component\";\nimport UserBadge from \"./UserBadge\";\n\nexport default class UserBadgeList extends Component {\n  view() {\n    const categories = {};\n    const uncategorized = [];\n\n    this.attrs.user.userBadges().map((userBadge) => {\n      if (!userBadge) return null;\n\n      // Categorized\n      if (userBadge.badge().category()) {\n        const category = userBadge.badge().category();\n\n        if (!categories[category.id()]) {\n          categories[category.id()] = {\n            category,\n            badges: [userBadge],\n          };\n        } else {\n          categories[category.id()].badges.push(userBadge);\n        }\n      }\n      // Uncategorized\n      else {\n        uncategorized.push(userBadge);\n      }\n    });\n\n    return (\n      <div className=\"UserBadges\">\n        {Object.keys(categories).length === 0 && (\n          <div className={\"Placeholder\"}>\n            <p>\n              {app.translator.trans(\n                \"v17development-flarum-badges.forum.user_no_badges\"\n              )}\n            </p>\n          </div>\n        )}\n\n        {Object.keys(categories).length >= 1 &&\n          Object.keys(categories)\n            .sort(\n              (a, b) =>\n                categories[a].category.order() - categories[b].category.order()\n            )\n            .map((id) => {\n              const category = categories[id].category;\n              const badges = categories[id].badges;\n\n              if (!category.isEnabled()) return null;\n\n              return (\n                <div className={\"UserBadgesCategory\"}>\n                  <h3>{category.name()}</h3>\n\n                  {category.description() && <p>{category.description()}</p>}\n\n                  {badges\n                    .sort((a, b) => a.badge().order() - b.badge().order())\n                    .map((userBadge) => (\n                      <UserBadge\n                        badge={userBadge.badge()}\n                        userBadgeData={userBadge}\n                      />\n                    ))}\n                </div>\n              );\n            })}\n\n        {/* Uncategorized badges */}\n        {uncategorized.length >= 1 && (\n          <div className={\"UserBadgesCategory\"}>\n            <h3>\n              {app.translator.trans(\n                \"v17development-flarum-badges.forum.uncategorized\"\n              )}\n            </h3>\n\n            {uncategorized\n              .sort((a, b) => a.badge().order() - b.badge().order())\n              .map((userBadge) => (\n                <UserBadge\n                  badge={userBadge.badge()}\n                  userBadgeData={userBadge}\n                />\n              ))}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import UserPage from \"flarum/components/UserPage\";\nimport LoadingIndicator from \"flarum/components/LoadingIndicator\";\nimport UserBadgeList from \"./UserBadgeList\";\n\nexport default class BadgesProfilePage extends UserPage {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.user = null;\n\n    this.loading = true;\n\n    this.loadUser(m.route.param(\"username\"));\n  }\n\n  content() {\n    if (!this.user || this.loading) {\n      return <LoadingIndicator size={46} />;\n    }\n\n    return UserBadgeList.component({\n      user: this.user,\n    });\n  }\n\n  show(user) {\n    super.show(user);\n    this.user = user;\n\n    app.store\n      .find(\"users\", user.id(), {\n        include: \"userBadges,userBadges.badge,userBadges.badge.category\",\n      })\n      .then(() => {\n        this.loading = false;\n        m.redraw();\n      });\n  }\n}\n","import Component from \"flarum/common/Component\";\nimport Link from \"flarum/components/Link\";\n\nexport default class TableView extends Component {\n  view() {\n    if (!this.attrs.badges) {\n      return null;\n    }\n\n    const badges = this.attrs.badges;\n\n    return (\n      <table width={\"100%\"} className={\"BadgeTable\"}>\n        <thead>\n          <tr>\n            <th scope=\"col\">\n              {app.translator.trans(\n                \"v17development-flarum-badges.forum.badge.badges\"\n              )}\n            </th>\n            <th scope=\"col\">\n              {app.translator.trans(\n                \"v17development-flarum-badges.forum.badge.description\"\n              )}\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {badges.map((badge) => {\n            return (\n              <tr>\n                <td>\n                  <Link\n                    href={app.route(\"badges.item\", { id: badge.id() })}\n                    className=\"UserBadge\"\n                  >\n                    <i className={badge.icon()} /> {badge.name()}\n                  </Link>\n                </td>\n                <td>\n                  {badge.description()}\n\n                  <div className={\"BadgeTableRewarded\"}>\n                    {app.translator.trans(\n                      \"v17development-flarum-badges.forum.badge.earned_count\",\n                      {\n                        count: badge.earnedAmount(),\n                      }\n                    )}\n                  </div>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n","import Component from \"flarum/common/Component\";\nimport Link from \"flarum/components/Link\";\n\nexport default class BlockListView extends Component {\n  view() {\n    if (!this.attrs.badges) {\n      return null;\n    }\n\n    const badges = this.attrs.badges;\n\n    return (\n      <ul className={\"BadgeCategoryList\"}>\n        {badges.map((badge) => {\n          return (\n            <li>\n              <Link\n                href={app.route(\"badges.item\", { id: badge.id() })}\n                className={\"BadgeContainer\"}\n              >\n                <div className={\"BadgeContainerInfo\"}>\n                  <span className=\"UserBadge\">\n                    <i className={badge.icon()} /> {badge.name()}\n                  </span>\n\n                  <p className={\"BadgeDescription\"}>{badge.description()}</p>\n\n                  <p>\n                    {app.translator.trans(\n                      \"v17development-flarum-badges.forum.badge.earned_count\",\n                      {\n                        count: badge.earnedAmount(),\n                      }\n                    )}\n                  </p>\n                </div>\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n}\n","import Page from \"flarum/components/Page\";\nimport IndexPage from \"flarum/components/IndexPage\";\nimport listItems from \"flarum/common/helpers/listItems\";\nimport LoadingIndicator from \"flarum/components/LoadingIndicator\";\nimport TableView from \"./BadgeCategoryList/TableView\";\nimport BlockListView from \"./BadgeCategoryList/BlockListView\";\n\nexport default class BadgesOverviewPage extends Page {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.bodyClass = \"App--index\";\n\n    this.loading = true;\n\n    app.history.push(\"badgeOverviewPage\");\n\n    app.setTitle(\n      app.translator.trans(\"v17development-flarum-badges.forum.badge.badges\")\n    );\n\n    // Load badge categories\n    app.store.find(\"badge_categories\").then(() => {\n      this.loading = false;\n\n      m.redraw();\n    });\n  }\n\n  view() {\n    const categories = app.store\n      .all(\"badgeCategories\")\n      .sort((a, b) => a.order() - b.order());\n\n    return (\n      <div className=\"IndexPage\">\n        <div className=\"container\">\n          <div className=\"sideNavContainer\">\n            <nav className=\"IndexPage-nav sideNav\">\n              <ul>{listItems(IndexPage.prototype.sidebarItems().toArray())}</ul>\n            </nav>\n            <div className=\"IndexPage-results sideNavOffset\">\n              <h2 className={\"BadgeOverviewTitle\"}>\n                {app.translator.trans(\n                  \"v17development-flarum-badges.forum.badge.badges\"\n                )}\n              </h2>\n\n              {this.loading && <LoadingIndicator size={\"large\"} />}\n\n              {!this.loading &&\n                categories.map((category) => {\n                  const badges = category\n                    .badges()\n                    .sort((a, b) => a.order() - b.order());\n\n                  return (\n                    <div className={\"BadgeCategory\"}>\n                      <h3>{category.name()}</h3>\n                      {category.description() && (\n                        <p>{category.description()}</p>\n                      )}\n\n                      {category.isTable() && <TableView badges={badges} />}\n\n                      {!category.isTable() && <BlockListView badges={badges} />}\n                    </div>\n                  );\n                })}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import Component from \"flarum/common/Component\";\nimport Button from \"flarum/components/Button\";\nimport Link from \"flarum/components/Link\";\nimport LoadingIndicator from \"flarum/components/LoadingIndicator\";\nimport avatar from \"flarum/helpers/avatar\";\nimport humanTime from \"flarum/helpers/humanTime\";\n\nexport default class BadgeUserList extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    // Load articles\n    this.attrs.state.refreshParams({\n      filter: {\n        badge: this.attrs.badgeId,\n      },\n      sort: \"-assignedAt\",\n    });\n  }\n\n  view() {\n    const state = this.attrs.state;\n\n    let loading = null;\n\n    if (state.isInitialLoading() || state.isLoadingNext()) {\n      loading = LoadingIndicator.component({\n        size: \"large\",\n      });\n    } else if (state.hasNext()) {\n      loading = Button.component(\n        {\n          className: \"Button\",\n          icon: \"fas fa-chevron-down\",\n          onclick: state.loadNext.bind(state),\n        },\n        app.translator.trans(\"core.forum.discussion_list.load_more_button\")\n      );\n    }\n\n    // No items\n    if (state.isInitialLoading() && state.isEmpty()) {\n      return <LoadingIndicator />;\n    }\n\n    // No items\n    if (state.isEmpty()) {\n      return (\n        <div className={\"BadgeUserList-empty\"}>\n          {app.translator.trans(\n            \"v17development-flarum-badges.forum.no_received\"\n          )}\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <ul className={\"BadgeUserList\"}>\n          {state.getPages().map((pg) => {\n            return pg.items.map((userBadge) => {\n              return (\n                <li>\n                  <Link\n                    href={app.route(\"user.badges\", {\n                      username: userBadge.user().username(),\n                    })}\n                    className={\"BadgeUserList-user\"}\n                  >\n                    {avatar(userBadge.user())}\n\n                    <div className={\"BadgeUserList-userinfo\"}>\n                      <h4>{userBadge.user().displayName()}</h4>\n\n                      <p>\n                        {app.translator.trans(\n                          \"v17development-flarum-badges.forum.badge.received_on\",\n                          {\n                            date: humanTime(userBadge.assignedAt()),\n                          }\n                        )}\n                      </p>\n                    </div>\n                  </Link>\n                </li>\n              );\n            });\n          })}\n        </ul>\n\n        {loading && <div className=\"SupportSearchList-loadMore\">{loading}</div>}\n      </div>\n    );\n  }\n}\n","import Page from \"flarum/components/Page\";\nimport IndexPage from \"flarum/components/IndexPage\";\nimport listItems from \"flarum/common/helpers/listItems\";\nimport LoadingIndicator from \"flarum/components/LoadingIndicator\";\nimport LinkButton from \"flarum/components/LinkButton\";\nimport BadgeUserList from \"./BadgeUserList\";\n\nexport default class BadgeItemPage extends Page {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.bodyClass = \"App--index\";\n\n    const found = app.store.getById(\"badges\", m.route.param(\"id\"));\n\n    this.loading = !found;\n\n    if (!found) {\n      // Load badge categories\n      app.store.find(`badges/${m.route.param(\"id\")}`).then((badge) => {\n        this.loading = false;\n\n        app.history.push(\"badgeItemPage\", badge.name());\n\n        this.setTitle(badge);\n\n        m.redraw();\n      });\n    } else {\n      app.history.push(\"badgeItemPage\", found.name());\n\n      this.setTitle(found);\n    }\n  }\n\n  setTitle(badge) {\n    app.setTitle(\n      `${badge.name()} - ${app.translator.trans(\n        \"v17development-flarum-badges.forum.badge.badges\"\n      )}`\n    );\n  }\n\n  view() {\n    const badge = app.store.getById(\"badges\", m.route.param(\"id\"));\n\n    return (\n      <div className=\"IndexPage\">\n        <div className=\"container\">\n          <div className=\"sideNavContainer\">\n            <nav className=\"IndexPage-nav sideNav\">\n              <ul>{listItems(IndexPage.prototype.sidebarItems().toArray())}</ul>\n            </nav>\n            <div className=\"IndexPage-results sideNavOffset\">\n              <LinkButton\n                href={app.route(\"badges\")}\n                icon={\"fas fa-chevron-left\"}\n                className={\"Button BadgesOverviewButton\"}\n              >\n                {app.translator.trans(\n                  \"v17development-flarum-badges.forum.badge.badges\"\n                )}\n              </LinkButton>\n\n              {this.loading && <LoadingIndicator size={\"large\"} />}\n\n              {!this.loading && (\n                <div className={\"BadgeUserListInfo\"}>\n                  <i className={badge.icon()} />\n\n                  <div className={\"BadgeUserListInfo-meta\"}>\n                    <h3>{badge.name()}</h3>\n                    <p>{badge.description()}</p>\n                  </div>\n                </div>\n              )}\n\n              {badge && (\n                <h3>\n                  {app.translator.trans(\n                    \"v17development-flarum-badges.forum.badge.earned_by_count\",\n                    {\n                      count: badge.earnedAmount(),\n                    }\n                  )}\n                </h3>\n              )}\n\n              {!this.loading && app.forum.attribute(\"canViewDetailedBadgeUsers\") && (\n                <BadgeUserList\n                  state={app.userBadgeListState}\n                  badgeId={badge.id()}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import { extend } from \"flarum/extend\";\nimport IndexPage from \"flarum/components/IndexPage\";\nimport LinkButton from \"flarum/components/LinkButton\";\n\nexport default function addSidebarNav() {\n  extend(IndexPage.prototype, \"navItems\", function (items) {\n    items.add(\n      \"badges\",\n      <LinkButton icon=\"fas fa-id-badge\" href={app.route(\"badges\")}>\n        {app.translator.trans(\n          \"v17development-flarum-badges.forum.badge.badges\"\n        )}\n      </LinkButton>,\n      15\n    );\n\n    return items;\n  });\n}\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import PaginatedListState from \"flarum/common/states/PaginatedListState\";\n\nexport default class UserBadgeListState extends PaginatedListState {\n  constructor() {\n    super({}, 1, 18);\n\n    this.pageSize = 18;\n  }\n\n  get type() {\n    return \"user_badges\";\n  }\n}\n","import Notification from \"flarum/forum/components/Notification\";\n\nexport default class BadgeReceivedNotification extends Notification {\n  icon() {\n    return \"\";\n  }\n\n  href() {\n    return app.route(\"user.badges\", {\n      username: app.session.user.username(),\n    });\n  }\n\n  content() {\n    return app.translator.trans(\n      \"v17development-flarum-badges.forum.notification.title\"\n    );\n  }\n\n  excerpt() {\n    const subject = this.attrs.notification.subject();\n\n    return (\n      <div>\n        <i className={`icon ${subject.badge().icon()}`} />\n\n        {subject.badge().name()}\n      </div>\n    );\n  }\n}\n","import { extend } from \"flarum/extend\";\nimport Model from \"flarum/Model\";\nimport User from \"flarum/models/User\";\nimport UserPage from \"flarum/components/UserPage\";\nimport UserControls from \"flarum/utils/UserControls\";\nimport LinkButton from \"flarum/components/LinkButton\";\nimport Button from \"flarum/components/Button\";\nimport Badge from \"../common/models/Badge\";\nimport BadgeCategory from \"../common/models/BadgeCategory\";\nimport UserBadge from \"../common/models/UserBadge\";\nimport BadgesProfilePage from \"./components/BadgesProfilePage\";\nimport BadgesOverviewPage from \"./components/BadgesOverviewPage\";\nimport BadgeItemPage from \"./components/BadgeItemPage\";\nimport GiveBadgeModal from \"./components/GiveBadgeModal\";\nimport addSidebarNav from \"./addSidebarNav\";\nimport UserBadgeListState from \"./states/UserBadgeListState\";\nimport BadgeReceivedNotification from \"./notification/BadgeReceivedNotification\";\nimport NotificationGrid from \"flarum/forum/components/NotificationGrid\";\n\napp.initializers.add(\"v17development-flarum-badges\", (app) => {\n  app.store.models.badges = Badge;\n  app.store.models.badgeCategories = BadgeCategory;\n  app.store.models.userBadges = UserBadge;\n\n  User.prototype.userBadges = Model.hasMany(\"userBadges\");\n  User.prototype.userPrimaryBadge = Model.hasOne(\"userPrimaryBadge\");\n\n  // Add user badges to the user profile\n  app.routes[\"user.badges\"] = {\n    path: \"/u/:username/badges\",\n    component: BadgesProfilePage,\n  };\n\n  // Badges overview page\n  app.routes.badges = {\n    path: \"/badges\",\n    component: BadgesOverviewPage,\n  };\n\n  // Future\n  // // Badges overview page\n  // app.routes[\"badges.category\"] = {\n  //   path: \"/badges/category/:id\",\n  //   component: BadgesOverviewPage,\n  // };\n\n  // Badge item page\n  app.routes[\"badges.item\"] = {\n    path: \"/badges/:id\",\n    component: BadgeItemPage,\n  };\n\n  addSidebarNav();\n\n  app.userBadgeListState = new UserBadgeListState();\n\n  // Badge received notification\n  app.notificationComponents.badgeReceived = BadgeReceivedNotification;\n\n  // Enable badge notifications?\n  extend(NotificationGrid.prototype, \"notificationTypes\", function (items) {\n    items.add(\"badgeReceived\", {\n      name: \"badgeReceived\",\n      icon: \"fas fa-user-tag\",\n      label: app.translator.trans(\n        \"v17development-flarum-badges.forum.notification.settings\"\n      ),\n    });\n  });\n\n  // Add uploads to user page menu items\n  extend(UserPage.prototype, \"navItems\", function (items) {\n    items.add(\n      \"badges\",\n      LinkButton.component(\n        {\n          href: app.route(\"user.badges\", {\n            username: this.user.username(),\n          }),\n          name: \"badges\",\n          icon: \"fas fa-user-tag\",\n        },\n        [\n          app.translator.trans(\n            \"v17development-flarum-badges.forum.badge.badges\"\n          ),\n          <span className=\"Button-badge\">{this.user.userBadges().length}</span>,\n        ]\n      ),\n      90\n    );\n  });\n\n  extend(UserControls, \"moderationControls\", function (items, user) {\n    // User can give badges\n    if (app.forum.attribute(\"canGiveBadge\")) {\n      items.add(\n        \"test\",\n        <Button\n          icon=\"fas fa-user-tag\"\n          onclick={() =>\n            app.modal.show(GiveBadgeModal, {\n              user: user,\n            })\n          }\n        >\n          {app.translator.trans(\n            \"v17development-flarum-badges.forum.give_badge\"\n          )}\n        </Button>\n      );\n    }\n  });\n});\n"],"sourceRoot":""}