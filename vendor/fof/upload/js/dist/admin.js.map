{"version":3,"sources":["webpack://@fof/upload/webpack/bootstrap","webpack://@fof/upload/external \"flarum.core.compat['app']\"","webpack://@fof/upload/external \"flarum.core.compat['utils/withAttr']\"","webpack://@fof/upload/external \"flarum.core.compat['utils/Stream']\"","webpack://@fof/upload/external \"flarum.core.compat['components/Select']\"","webpack://@fof/upload/external \"flarum.core.compat['components/Switch']\"","webpack://@fof/upload/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/upload/external \"flarum.core.compat['components/Button']\"","webpack://@fof/upload/external \"flarum.core.compat['utils/saveSettings']\"","webpack://@fof/upload/external \"flarum.core.compat['components/Alert']\"","webpack://@fof/upload/external \"flarum.core.compat['components/UploadImageButton']\"","webpack://@fof/upload/external \"flarum.core.compat['components/ExtensionPage']\"","webpack://@fof/upload/./src/admin/components/UploadPage.js","webpack://@fof/upload/./src/admin/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","_inheritsLoose","subClass","superClass","constructor","__proto__","UploadPage","oninit","vnode","this","loading","fields","checkboxes","objects","watermarkPositions","center","left","top","right","bottom","settings","app","data","settingsPrefix","uploadMethodOptions","addPrefix","templateOptions","values","forEach","Stream","JSON","parse","defaultAdap","keys","length","mimeTypes","adapter","template","newMimeType","regex","content","onsubmit","translator","trans","maxFileSize","oninput","withAttr","map","mime","config","updateMimeTypeKey","Select","component","options","onchange","updateMimeTypeAdapter","getTemplateOptionsForInput","updateMimeTypeTemplate","Button","type","className","onclick","deleteMimeType","addMimeType","templateOptionsDescriptions","Switch","state","mustResize","resizeMaxWidth","disabled","whitelistedClientExtensions","addsWatermarks","watermarkPosition","UploadImageButton","disableHotlinkProtection","disableDownloadLogging","cdnUrl","imgurClientId","qiniuKey","qiniuSecret","qiniuBucket","awsS3Key","awsS3Secret","awsS3Bucket","awsS3Region","awsS3Endpoint","awsS3UsePathStyleEndpoint","awsS3ACL","changed","option","children","push","description","fieldsCheck","some","checkboxesCheck","objectsCheck","stringify","e","preventDefault","alerts","dismiss","successAlert","saveSettings","then","show","Alert","redraw","ExtensionPage","initializers","add","extensionData","registerPage","registerPermission","icon","label","permission","allowGuest"],"mappings":"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","file":"admin.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 18);\n","module.exports = flarum.core.compat['app'];","module.exports = flarum.core.compat['utils/withAttr'];","module.exports = flarum.core.compat['utils/Stream'];","module.exports = flarum.core.compat['components/Select'];","module.exports = flarum.core.compat['components/Switch'];","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","module.exports = flarum.core.compat['components/Button'];","module.exports = flarum.core.compat['utils/saveSettings'];","module.exports = flarum.core.compat['components/Alert'];","module.exports = flarum.core.compat['components/UploadImageButton'];","module.exports = flarum.core.compat['components/ExtensionPage'];","import app from 'flarum/app';\nimport Button from 'flarum/components/Button';\nimport saveSettings from 'flarum/utils/saveSettings';\nimport Alert from 'flarum/components/Alert';\nimport Select from 'flarum/components/Select';\nimport Switch from 'flarum/components/Switch';\nimport UploadImageButton from 'flarum/components/UploadImageButton';\nimport withAttr from 'flarum/utils/withAttr';\nimport Stream from 'flarum/utils/Stream';\nimport ExtensionPage from 'flarum/components/ExtensionPage';\n\n/* global m */\n\nexport default class UploadPage extends ExtensionPage {\n    oninit(vnode) {\n        super.oninit(vnode);\n        // whether we are saving the settings or not right now\n        this.loading = false;\n\n        // the fields we need to watch and to save\n        this.fields = [\n            // image\n            'resizeMaxWidth',\n            'cdnUrl',\n            'maxFileSize',\n            'whitelistedClientExtensions',\n            // watermark\n            'watermark',\n            'watermarkPosition',\n            // Imgur\n            'imgurClientId',\n            // AWS\n            'awsS3Key',\n            'awsS3Secret',\n            'awsS3Bucket',\n            'awsS3Region',\n            'awsS3Endpoint',\n            'awsS3ACL',\n            // QIniu\n            'qiniuKey',\n            'qiniuSecret',\n            'qiniuBucket',\n        ];\n\n        // the checkboxes we need to watch and to save.\n        this.checkboxes = ['mustResize', 'addsWatermarks', 'disableHotlinkProtection', 'disableDownloadLogging', 'awsS3UsePathStyleEndpoint'];\n\n        // fields that are objects\n        this.objects = ['mimeTypes'];\n\n        // watermark positions\n        this.watermarkPositions = {\n            'top-left': 'top-left',\n            'top-right': 'top-right',\n            'bottom-left': 'bottom-left',\n            'bottom-right': 'bottom-right',\n            center: 'center',\n            left: 'left',\n            top: 'top',\n            right: 'right',\n            bottom: 'bottom',\n        };\n\n        // get the saved settings from the database\n        const settings = app.data.settings;\n\n        // our package prefix (to be added to every field and checkbox in the setting table)\n        this.settingsPrefix = 'fof-upload';\n\n        // Options for the Upload methods dropdown menu.\n        this.uploadMethodOptions = settings[this.addPrefix('availableUploadMethods')] || {};\n        // Options for the Template dropdown menu.\n        this.templateOptions = settings[this.addPrefix('availableTemplates')] || {};\n\n        // Contains current values.\n        this.values = {};\n        // bind the values of the fields and checkboxes to the getter/setter functions\n        this.fields.forEach((key) => (this.values[key] = Stream(settings[this.addPrefix(key)])));\n        this.checkboxes.forEach((key) => (this.values[key] = Stream(settings[this.addPrefix(key)] === '1')));\n        this.objects.forEach(\n            (key) => (this.values[key] = settings[this.addPrefix(key)] ? Stream(JSON.parse(settings[this.addPrefix(key)])) : Stream())\n        );\n\n        // Set a sane default in case no mimeTypes have been configured yet.\n        // Since 'local' (or others) can now be disabled, pick the last entry in the object for default\n        this.defaultAdap = Object.keys(this.uploadMethodOptions)[Object.keys(this.uploadMethodOptions).length - 1];\n        this.values.mimeTypes() ||\n            (this.values.mimeTypes = Stream({\n                '^image\\\\/.*': {\n                    adapter: this.defaultAdap,\n                    template: 'image-preview',\n                },\n            }));\n\n        this.newMimeType = {\n            regex: Stream(''),\n            adapter: Stream(this.defaultAdap),\n            template: Stream('file'),\n        };\n    }\n\n    /**\n     * Show the actual ImageUploadPage.\n     *\n     * @returns {*}\n     */\n    content() {\n        return [\n            m('.UploadPage', [\n                m('.container', [\n                    m(\n                        'form',\n                        {\n                            onsubmit: this.onsubmit.bind(this),\n                        },\n                        [\n                            m('fieldset', [\n                                m('legend', app.translator.trans('fof-upload.admin.labels.preferences.title')),\n                                m('label', app.translator.trans('fof-upload.admin.labels.preferences.max_file_size')),\n                                m('input.FormControl', {\n                                    value: this.values.maxFileSize() || 2048,\n                                    oninput: withAttr('value', this.values.maxFileSize),\n                                }),\n                                m('label', app.translator.trans('fof-upload.admin.labels.preferences.mime_types')),\n                                m(\n                                    '.MimeTypes--Container',\n                                    Object.keys(this.values.mimeTypes()).map((mime) => {\n                                        let config = this.values.mimeTypes()[mime];\n                                        // Compatibility for older versions.\n                                        if (typeof config !== 'object') {\n                                            config = {\n                                                adapter: config,\n                                                template: 'file',\n                                            };\n                                        }\n\n                                        return m('div', [\n                                            m('input.FormControl.MimeTypes', {\n                                                value: mime,\n                                                oninput: withAttr('value', this.updateMimeTypeKey.bind(this, mime)),\n                                            }),\n                                            Select.component({\n                                                options: this.uploadMethodOptions,\n                                                onchange: this.updateMimeTypeAdapter.bind(this, mime, config),\n                                                value: config.adapter || 'local',\n                                            }),\n                                            Select.component({\n                                                options: this.getTemplateOptionsForInput(),\n                                                onchange: this.updateMimeTypeTemplate.bind(this, mime, config),\n                                                value: config.template || 'local',\n                                            }),\n                                            Button.component(\n                                                {\n                                                    type: 'button',\n                                                    className: 'Button Button--warning',\n                                                    onclick: this.deleteMimeType.bind(this, mime),\n                                                },\n                                                'x'\n                                            ),\n                                        ]);\n                                    }),\n                                    m('br'),\n                                    m('div', [\n                                        m('input.FormControl.MimeTypes.add-MimeType-key', {\n                                            value: this.newMimeType.regex(),\n                                            oninput: withAttr('value', this.newMimeType.regex),\n                                        }),\n                                        Select.component({\n                                            options: this.uploadMethodOptions,\n                                            className: 'add-MimeType-value',\n                                            oninput: withAttr('value', this.newMimeType.adapter),\n                                            value: this.newMimeType.adapter(),\n                                        }),\n                                        Select.component({\n                                            options: this.getTemplateOptionsForInput(),\n                                            className: 'add-MimeType-value',\n                                            oninput: withAttr('value', this.newMimeType.template),\n                                            value: this.newMimeType.template(),\n                                        }),\n                                        Button.component(\n                                            {\n                                                type: 'button',\n                                                className: 'Button Button--warning',\n                                                onclick: this.addMimeType.bind(this),\n                                            },\n                                            '+'\n                                        ),\n                                    ])\n                                ),\n                                m('.helpText', app.translator.trans('fof-upload.admin.help_texts.mime_types')),\n                                m('.helpText', app.translator.trans('fof-upload.admin.help_texts.download_templates')),\n                                this.templateOptionsDescriptions(),\n                            ]),\n                            m('fieldset', [\n                                m('legend', app.translator.trans('fof-upload.admin.labels.resize.title')),\n                                m('.helpText', app.translator.trans('fof-upload.admin.help_texts.resize')),\n                                Switch.component(\n                                    {\n                                        state: this.values.mustResize() || false,\n                                        onchange: this.values.mustResize,\n                                    },\n                                    app.translator.trans('fof-upload.admin.labels.resize.toggle')\n                                ),\n                                m('label', app.translator.trans('fof-upload.admin.labels.resize.max_width')),\n                                m('input', {\n                                    className: 'FormControl',\n                                    value: this.values.resizeMaxWidth() || 100,\n                                    oninput: withAttr('value', this.values.resizeMaxWidth),\n                                    disabled: !this.values.mustResize(),\n                                }),\n                            ]),\n                            m('fieldset', [\n                                m('legend', app.translator.trans('fof-upload.admin.labels.client_extension.title')),\n                                m('.helpText', app.translator.trans('fof-upload.admin.help_texts.client_extension')),\n                                m('input', {\n                                    className: 'FormControl',\n                                    value: this.values.whitelistedClientExtensions() || '',\n                                    oninput: withAttr('value', this.values.whitelistedClientExtensions),\n                                }),\n                            ]),\n                            m('fieldset', [\n                                m('legend', app.translator.trans('fof-upload.admin.labels.watermark.title')),\n                                m('.helpText', app.translator.trans('fof-upload.admin.help_texts.watermark')),\n                                Switch.component(\n                                    {\n                                        state: this.values.addsWatermarks() || false,\n                                        onchange: this.values.addsWatermarks,\n                                    },\n                                    app.translator.trans('fof-upload.admin.labels.watermark.toggle')\n                                ),\n                                m('label', app.translator.trans('fof-upload.admin.labels.watermark.position')),\n                                m('div', [\n                                    Select.component({\n                                        options: this.watermarkPositions,\n                                        onchange: this.values.watermarkPosition,\n                                        value: this.values.watermarkPosition() || 'bottom-right',\n                                    }),\n                                ]),\n                                m('label', {}, app.translator.trans('fof-upload.admin.labels.watermark.file')),\n                                UploadImageButton.component({\n                                    name: 'fof/watermark',\n                                }),\n                            ]),\n                            m('fieldset', [\n                                m('legend', app.translator.trans('fof-upload.admin.labels.disable-hotlink-protection.title')),\n                                m('.helpText', app.translator.trans('fof-upload.admin.help_texts.disable-hotlink-protection')),\n                                Switch.component(\n                                    {\n                                        state: this.values.disableHotlinkProtection() || false,\n                                        onchange: this.values.disableHotlinkProtection,\n                                    },\n                                    app.translator.trans('fof-upload.admin.labels.disable-hotlink-protection.toggle')\n                                ),\n                                m('legend', app.translator.trans('fof-upload.admin.labels.disable-download-logging.title')),\n                                m('.helpText', app.translator.trans('fof-upload.admin.help_texts.disable-download-logging')),\n                                Switch.component(\n                                    {\n                                        state: this.values.disableDownloadLogging() || false,\n                                        onchange: this.values.disableDownloadLogging,\n                                    },\n                                    app.translator.trans('fof-upload.admin.labels.disable-download-logging.toggle')\n                                ),\n                            ]),\n                            m('fieldset', [\n                                m('legend', app.translator.trans('fof-upload.admin.labels.local.title')),\n                                m('label', app.translator.trans('fof-upload.admin.labels.local.cdn_url')),\n                                m('input.FormControl', {\n                                    value: this.values.cdnUrl() || '',\n                                    oninput: withAttr('value', this.values.cdnUrl),\n                                }),\n                            ]),\n                            m('fieldset', [\n                                m('legend', app.translator.trans('fof-upload.admin.labels.imgur.title')),\n                                m('label', app.translator.trans('fof-upload.admin.labels.imgur.client_id')),\n                                m('input.FormControl', {\n                                    value: this.values.imgurClientId() || '',\n                                    oninput: withAttr('value', this.values.imgurClientId),\n                                }),\n                            ]),\n                            m('fieldset', [\n                                m('legend', app.translator.trans('fof-upload.admin.labels.qiniu.title')),\n                                m('label', app.translator.trans('fof-upload.admin.labels.qiniu.key')),\n                                m('input.FormControl', {\n                                    value: this.values.qiniuKey() || '',\n                                    oninput: withAttr('value', this.values.qiniuKey),\n                                }),\n                                m('label', {}, app.translator.trans('fof-upload.admin.labels.qiniu.secret')),\n                                m('input.FormControl', {\n                                    value: this.values.qiniuSecret() || '',\n                                    oninput: withAttr('value', this.values.qiniuSecret),\n                                }),\n                                m('label', {}, app.translator.trans('fof-upload.admin.labels.qiniu.bucket')),\n                                m('input.FormControl', {\n                                    value: this.values.qiniuBucket() || '',\n                                    oninput: withAttr('value', this.values.qiniuBucket),\n                                }),\n                            ]),\n                            m('fieldset', [\n                                m('legend', app.translator.trans('fof-upload.admin.labels.aws-s3.title')),\n                                m('label', app.translator.trans('fof-upload.admin.labels.aws-s3.key')),\n                                m('input.FormControl', {\n                                    value: this.values.awsS3Key() || '',\n                                    oninput: withAttr('value', this.values.awsS3Key),\n                                }),\n                                m('label', app.translator.trans('fof-upload.admin.labels.aws-s3.secret')),\n                                m('input.FormControl', {\n                                    value: this.values.awsS3Secret() || '',\n                                    oninput: withAttr('value', this.values.awsS3Secret),\n                                }),\n                                m('label', app.translator.trans('fof-upload.admin.labels.aws-s3.bucket')),\n                                m('input.FormControl', {\n                                    value: this.values.awsS3Bucket() || '',\n                                    oninput: withAttr('value', this.values.awsS3Bucket),\n                                }),\n                                m('label', app.translator.trans('fof-upload.admin.labels.aws-s3.region')),\n                                m('input.FormControl', {\n                                    value: this.values.awsS3Region() || '',\n                                    oninput: withAttr('value', this.values.awsS3Region),\n                                }),\n                            ]),\n                            m('fieldset', [\n                                m('legend', app.translator.trans('fof-upload.admin.labels.aws-s3.advanced_title')),\n                                m('.helpText', app.translator.trans('fof-upload.admin.help_texts.s3_compatible_storage')),\n                                m('label', app.translator.trans('fof-upload.admin.labels.aws-s3.endpoint')),\n                                m('input.FormControl', {\n                                    value: this.values.awsS3Endpoint() || '',\n                                    oninput: withAttr('value', this.values.awsS3Endpoint),\n                                }),\n                                Switch.component(\n                                    {\n                                        state: this.values.awsS3UsePathStyleEndpoint() || false,\n                                        onchange: this.values.awsS3UsePathStyleEndpoint,\n                                    },\n                                    app.translator.trans('fof-upload.admin.labels.aws-s3.use_path_style_endpoint')\n                                ),\n                                m('label', app.translator.trans('fof-upload.admin.labels.aws-s3.acl')),\n                                m('input.FormControl', {\n                                    value: this.values.awsS3ACL() || '',\n                                    oninput: withAttr('value', this.values.awsS3ACL),\n                                }),\n                                m('.helpText', app.translator.trans('fof-upload.admin.help_texts.s3_acl')),\n                            ]),\n                            Button.component(\n                                {\n                                    type: 'submit',\n                                    className: 'Button Button--primary',\n                                    loading: this.loading,\n                                    disabled: !this.changed(),\n                                },\n                                app.translator.trans('fof-upload.admin.buttons.save')\n                            ),\n                        ]\n                    ),\n                ]),\n            ]),\n        ];\n    }\n\n    getTemplateOptionsForInput() {\n        const options = {};\n\n        for (let option in this.templateOptions) {\n            if (!this.templateOptions.hasOwnProperty(option)) {\n                continue;\n            }\n\n            options[option] = this.templateOptions[option].name;\n        }\n\n        return options;\n    }\n\n    updateMimeTypeKey(mime, value) {\n        this.values.mimeTypes()[value] = this.values.mimeTypes()[mime];\n\n        this.deleteMimeType(mime);\n    }\n\n    updateMimeTypeAdapter(mime, config, value) {\n        config.adapter = value;\n        this.values.mimeTypes()[mime] = config;\n    }\n\n    updateMimeTypeTemplate(mime, config, value) {\n        config.template = value;\n        this.values.mimeTypes()[mime] = config;\n    }\n\n    deleteMimeType(mime) {\n        delete this.values.mimeTypes()[mime];\n    }\n\n    templateOptionsDescriptions() {\n        const children = [];\n\n        for (let template in this.templateOptions) {\n            if (!this.templateOptions.hasOwnProperty(template)) {\n                continue;\n            }\n\n            children.push(m('li', this.templateOptions[template].name + ': ' + this.templateOptions[template].description));\n        }\n\n        return m('ul', children);\n    }\n\n    addMimeType() {\n        this.values.mimeTypes()[this.newMimeType.regex()] = {\n            adapter: this.newMimeType.adapter(),\n            template: this.newMimeType.template(),\n        };\n\n        this.newMimeType.regex('');\n        this.newMimeType.adapter('local');\n        this.newMimeType.template('file');\n    }\n\n    /**\n     * Checks if the values of the fields and checkboxes are different from\n     * the ones stored in the database\n     *\n     * @returns boolean\n     */\n    changed() {\n        const fieldsCheck = this.fields.some((key) => this.values[key]() !== app.data.settings[this.addPrefix(key)]);\n        const checkboxesCheck = this.checkboxes.some((key) => this.values[key]() !== (app.data.settings[this.addPrefix(key)] === '1'));\n        const objectsCheck = this.objects.some((key) => JSON.stringify(this.values[key]()) !== app.data.settings[this.addPrefix(key)]);\n\n        return fieldsCheck || checkboxesCheck || objectsCheck;\n    }\n\n    /**\n     * Saves the settings to the database and redraw the page\n     *\n     * @param e\n     */\n    onsubmit(e) {\n        // prevent the usual form submit behaviour\n        e.preventDefault();\n\n        // if the page is already saving, do nothing\n        if (this.loading) return;\n\n        // prevents multiple savings\n        this.loading = true;\n\n        // remove previous success popup\n        app.alerts.dismiss(this.successAlert);\n\n        const settings = {};\n\n        // gets all the values from the form\n        this.fields.forEach((key) => (settings[this.addPrefix(key)] = this.values[key]()));\n        this.checkboxes.forEach((key) => (settings[this.addPrefix(key)] = this.values[key]()));\n        this.objects.forEach((key) => (settings[this.addPrefix(key)] = JSON.stringify(this.values[key]())));\n\n        // actually saves everything in the database\n        saveSettings(settings)\n            .then(() => {\n                // on success, show popup\n                this.successAlert = app.alerts.show(Alert, { type: 'success' }, app.translator.trans('core.admin.basics.saved_message'));\n            })\n            .catch(() => {})\n            .then(() => {\n                // return to the initial state and redraw the page\n                this.loading = false;\n                m.redraw();\n            });\n    }\n\n    /**\n     * Adds the prefix `this.settingsPrefix` at the beginning of `key`\n     *\n     * @returns string\n     */\n    addPrefix(key) {\n        return this.settingsPrefix + '.' + key;\n    }\n}\n","import app from 'flarum/app';\nimport UploadPage from './components/UploadPage';\n\napp.initializers.add('fof-upload', (app) => {\n    app.extensionData\n        .for('fof-upload')\n        .registerPage(UploadPage)\n        .registerPermission(\n            {\n                icon: 'far fa-file',\n                label: app.translator.trans('fof-upload.admin.permissions.upload_label'),\n                permission: 'fof-upload.upload',\n            },\n            'start',\n            50\n        )\n        .registerPermission(\n            {\n                icon: 'fas fa-download',\n                label: app.translator.trans('fof-upload.admin.permissions.download_label'),\n                permission: 'fof-upload.download',\n                allowGuest: true,\n            },\n            'view',\n            50\n        );\n});\n"],"sourceRoot":""}