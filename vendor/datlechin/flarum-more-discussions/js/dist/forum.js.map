{"version":3,"file":"forum.js","mappings":"MACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDR,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFf,EAAyBM,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,GAAO,G,+BCL9D,MAAM,EAA+BC,OAAOC,KAAKC,OAAO,a,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,iBCAlD,EAA+BF,OAAOC,KAAKC,OAAO,+B,aCAzC,SAASC,EAAgBhB,EAAGiB,GAKzC,OAJAD,EAAkBf,OAAOiB,eAAiBjB,OAAOiB,eAAeC,OAAS,SAAyBnB,EAAGiB,GAEnG,OADAjB,EAAEoB,UAAYH,EACPjB,CACR,EACMgB,EAAgBhB,EAAGiB,EAC3B,CCND,MAAM,EAA+BJ,OAAOC,KAAKC,OAAO,oB,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,uC,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,sC,aCQnCM,EAAAA,SAAAA,GCPN,IAAwBC,EAAUC,E,wIDQ/CC,SAAmB,E,EACnBC,YAA4B,G,EAC5BC,MAAgB,E,EAChBC,UAAkC,G,EAClCC,SAAmB,G,ECZ4BL,E,GAAVD,E,GAC5Bf,UAAYN,OAAO4B,OAAON,EAAWhB,WAC9Ce,EAASf,UAAUuB,YAAcR,EACjCJ,EAAeI,EAAUC,G,2BDWzBQ,OAAA,SAAOC,GACL,YAAMD,OAAN,UAAaC,GAEbC,KAAKT,SAAU,EACfS,KAAKR,YAAc,GACnBQ,KAAKP,MAAQQ,IAAAA,MAAAA,UAAoB,+CAAiD,EAClFD,KAAKL,SAAWM,IAAAA,MAAAA,UAAoB,uCACpCD,KAAKN,UACHO,IAAAA,MAAAA,UAAoB,yCAA2CA,IAAAA,WAAAA,MAAqB,uDAEtFD,KAAKE,MACN,E,EAEDC,KAAA,SAAKJ,GACH,IAAMP,EAAcQ,KAAKR,YACzB,OACE,WACE,SAAKY,UAAU,kBACb,QAAIA,UAAU,yBAAyBC,EAAEC,MAAMN,KAAKN,YACpD,QAAIa,KAAK,OAAO,YAAWP,KAAKT,QAASa,UAAU,8BAChDJ,KAAKT,QACJ,EAAC,IAAD,MAEAC,EAAYgB,KAAI,SAACC,GAAD,OACd,QAAI3C,IAAK2C,EAAWC,KAAM,UAASD,EAAWC,KAAMH,KAAK,UAAU,eAAa,MAC9E,EAAC,IAAD,CAAoBE,WAAYA,EAAYE,OAAQ,CAAC,IAFzC,MAU3B,E,EAEDT,KAAA,WAAO,WACLD,IAAAA,MAAAA,KACQ,cAAe,CACnBW,KAAM,CACJnB,MAAOO,KAAKP,OAEdoB,KAAMb,KAAKL,WAEZmB,MAAK,SAACC,GACL,EAAKvB,YAAcuB,EACnB,EAAKxB,SAAU,EACfc,EAAEW,QACH,GACJ,E,EAvDkB5B,CAAqC6B,KEF1DhB,IAAAA,aAAAA,IAAqB,qCAAqC,YACxDiB,EAAAA,EAAAA,QAAOC,IAAAA,UAAsB,YAAY,WACvC,IAAMC,EAAiCC,SAASC,cAAc,eAC9D,GAAKF,EAAL,CAEA,IAAMG,EAAqBF,SAASG,cAAc,OAClDD,EAAmBE,UAAUC,IAAI,mBACjCrB,EAAEsB,MCbS,SAAqBC,EAAsBC,GACxD,GAAKA,EAAcC,WACnB,OAAOD,EAAcC,WAAWC,aAAaH,EAASC,EAAcG,YACrE,CDUWC,CAAYV,EAAoBH,GAAahC,EAJ9B,CAKxB,GACF,G","sources":["webpack://@datlechin/flarum-more-discussions/webpack/bootstrap","webpack://@datlechin/flarum-more-discussions/webpack/runtime/compat get default export","webpack://@datlechin/flarum-more-discussions/webpack/runtime/define property getters","webpack://@datlechin/flarum-more-discussions/webpack/runtime/hasOwnProperty shorthand","webpack://@datlechin/flarum-more-discussions/webpack/runtime/make namespace object","webpack://@datlechin/flarum-more-discussions/external root \"flarum.core.compat['forum/app']\"","webpack://@datlechin/flarum-more-discussions/external root \"flarum.core.compat['common/extend']\"","webpack://@datlechin/flarum-more-discussions/external root \"flarum.core.compat['forum/components/PostStream']\"","webpack://@datlechin/flarum-more-discussions/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@datlechin/flarum-more-discussions/external root \"flarum.core.compat['common/Component']\"","webpack://@datlechin/flarum-more-discussions/external root \"flarum.core.compat['forum/components/DiscussionListItem']\"","webpack://@datlechin/flarum-more-discussions/external root \"flarum.core.compat['common/components/LoadingIndicator']\"","webpack://@datlechin/flarum-more-discussions/./src/forum/components/MoreDiscussions.tsx","webpack://@datlechin/flarum-more-discussions/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@datlechin/flarum-more-discussions/./src/forum/index.ts","webpack://@datlechin/flarum-more-discussions/./src/forum/helpers/insertAfter.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/PostStream'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Component'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionListItem'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/LoadingIndicator'];","import app from 'flarum/forum/app';\nimport Component, { ComponentAttrs } from 'flarum/common/Component';\nimport DiscussionListItem from 'flarum/forum/components/DiscussionListItem';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport type Mithril from 'mithril';\nimport { ValueOrArray } from '@askvortsov/rich-icu-message-formatter';\nimport Model from 'flarum/common/Model';\n\nexport default class MoreDiscussions<CustomAttrs> extends Component {\n  loading: boolean = false;\n  discussions: Array<Model> = [];\n  limit: number = 0;\n  blockName: ValueOrArray<string> = '';\n  filterBy: string = '';\n\n  oninit(vnode: Mithril.Vnode<CustomAttrs, this>) {\n    super.oninit(vnode);\n\n    this.loading = true;\n    this.discussions = [];\n    this.limit = app.forum.attribute('datlechin-more-discussions.discussionLimit') || 5;\n    this.filterBy = app.forum.attribute('datlechin-more-discussions.filterBy');\n    this.blockName =\n      app.forum.attribute('datlechin-more-discussions.blockName') || app.translator.trans('datlechin-more-discussions.forum.block_default_name');\n\n    this.load();\n  }\n\n  view(vnode: Mithril.Vnode<CustomAttrs, this>) {\n    const discussions = this.discussions;\n    return (\n      <>\n        <div className=\"DiscussionList\">\n          <h2 className=\"MoreDiscussions-title\">{m.trust(this.blockName)}</h2>\n          <ul role=\"feed\" aria-busy={this.loading} className=\"DiscussionList-discussions\">\n            {this.loading ? (\n              <LoadingIndicator />\n            ) : (\n              discussions.map((discussion) => (\n                <li key={discussion.id()} data-id={discussion.id()} role=\"article\" aria-setsize=\"-1\">\n                  <DiscussionListItem discussion={discussion} params={{}} />\n                </li>\n              ))\n            )}\n          </ul>\n        </div>\n      </>\n    );\n  }\n\n  load() {\n    app.store\n      .find('discussions', {\n        page: {\n          limit: this.limit,\n        },\n        sort: this.filterBy,\n      })\n      .then((results) => {\n        this.discussions = results;\n        this.loading = false;\n        m.redraw();\n      });\n  }\n}\n","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport PostStream from 'flarum/forum/components/PostStream';\nimport MoreDiscussions from './components/MoreDiscussions';\nimport insertAfter from './helpers/insertAfter';\n\napp.initializers.add('datlechin/flarum-more-discussions', () => {\n  extend(PostStream.prototype, 'oncreate', function () {\n    const postStream: HTMLElement | null = document.querySelector('.PostStream');\n    if (!postStream) return;\n\n    const moreDiscussionRoot = document.createElement('div');\n    moreDiscussionRoot.classList.add('MoreDiscussions');\n    m.mount(insertAfter(moreDiscussionRoot, postStream), MoreDiscussions);\n  });\n});\n","export default function insertAfter(newNode: HTMLElement, referenceNode: Element) {\n  if (!referenceNode.parentNode) return;\n  return referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","MoreDiscussions","subClass","superClass","loading","discussions","limit","blockName","filterBy","create","constructor","oninit","vnode","this","app","load","view","className","m","trust","role","map","discussion","id","params","page","sort","then","results","redraw","Component","extend","PostStream","postStream","document","querySelector","moreDiscussionRoot","createElement","classList","add","mount","newNode","referenceNode","parentNode","insertBefore","nextSibling","insertAfter"],"sourceRoot":""}